; English draughts, better known as checkers
; This is meant to be a version of English draughts that is more
; accurate and possibly faster to simulate.
; Jumps are required; chains of jumps happen across turns, so there
; is no three-jump limit. (Kinging stops a chain of jumps.)
; More detailed rules from: http://www.wcdf.net/rules.htm
; GDL rules by Alex Landau

(role white)
(role black)
(opponent black white)
(opponent white black)

(init (lastToMove black)) ; white starts
(init (cell a 2 white pawn))
(init (cell b 1 white pawn))
(init (cell c 2 white pawn))
(init (cell d 1 white pawn))
(init (cell e 2 white pawn))
(init (cell f 1 white pawn))
(init (cell g 2 white pawn))
(init (cell h 1 white pawn))
(init (cell b 3 white pawn))
(init (cell d 3 white pawn))
(init (cell f 3 white pawn))
(init (cell h 3 white pawn))
(init (cell a 8 black pawn))
(init (cell b 7 black pawn))
(init (cell c 8 black pawn))
(init (cell d 7 black pawn))
(init (cell e 8 black pawn))
(init (cell f 7 black pawn))
(init (cell g 8 black pawn))
(init (cell h 7 black pawn))
(init (cell a 6 black pawn))
(init (cell c 6 black pawn))
(init (cell e 6 black pawn))
(init (cell g 6 black pawn))

(<= (hasPiece ?x ?y)
    (true (cell ?x ?y ?anyPlayer ?anyType)))
(<= (empty ?x ?y)
    (file ?x)
    (rank ?y)
    (not (hasPiece ?x ?y)))

; Normal moves
; (Ignore which player has control for legal2)
(<= (legal2 white (move ?x1 ?y1 ?x2 ?y2))
    (true (cell ?x1 ?y1 white ?anyType))
    (or (nextFile ?x1 ?x2)
        (nextFile ?x2 ?x1))
    (nextRank ?y1 ?y2)
    (empty ?x2 ?y2))

(<= (legal2 white (move ?x1 ?y1 ?x2 ?y2))
    (true (cell ?x1 ?y1 white king))
    (or (nextFile ?x1 ?x2)
        (nextFile ?x2 ?x1))
    (nextRank ?y2 ?y1)
    (empty ?x2 ?y2))

(<= (legal2 black (move ?x1 ?y1 ?x2 ?y2))
    (true (cell ?x1 ?y1 black ?anyType))
    (or (nextFile ?x1 ?x2)
        (nextFile ?x2 ?x1))
    (nextRank ?y2 ?y1)
    (empty ?x2 ?y2))

(<= (legal2 black (move ?x1 ?y1 ?x2 ?y2))
    (true (cell ?x1 ?y1 black king))
    (or (nextFile ?x1 ?x2)
        (nextFile ?x2 ?x1))
    (nextRank ?y1 ?y2)
    (empty ?x2 ?y2))

; Captures
(<= (legal2 white (capture ?x1 ?y1 ?x3 ?y3))
    (true (cell ?x1 ?y1 white ?anyType))
    (nextRank ?y1 ?y2)
    (threeInARow ?x1 ?y1 ?x2 ?y2 ?x3 ?y3)
    (true (cell ?x2 ?y2 black ?anyType2))
    (not (hasPiece ?x3 ?y3)))

(<= (legal2 white (capture ?x1 ?y1 ?x3 ?y3))
    (true (cell ?x1 ?y1 white king))
    (nextRank ?y2 ?y1)
    (threeInARow ?x1 ?y1 ?x2 ?y2 ?x3 ?y3)
    (true (cell ?x2 ?y2 black ?anyType))
    (not (hasPiece ?x3 ?y3)))

(<= (legal2 black (capture ?x1 ?y1 ?x3 ?y3))
    (true (cell ?x1 ?y1 black ?anyType))
    (nextRank ?y2 ?y1)
    (threeInARow ?x1 ?y1 ?x2 ?y2 ?x3 ?y3)
    (true (cell ?x2 ?y2 white ?anyType2))
    (not (hasPiece ?x3 ?y3)))

(<= (legal2 black (capture ?x1 ?y1 ?x3 ?y3))
    (true (cell ?x1 ?y1 black king))
    (nextRank ?y1 ?y2)
    (threeInARow ?x1 ?y1 ?x2 ?y2 ?x3 ?y3)
    (true (cell ?x2 ?y2 white ?anyType))
    (not (hasPiece ?x3 ?y3)))

; From the possible moves, which are we actually allowed to do?
(<= (captureAvailable ?player)
    (legal2 ?player (capture ?x1 ?y1 ?x3 ?y3)))
(<= captureAvailableForLastCapturingPiece
    (true (capturingPiece ?x ?y))
    (legal2 ?player (capture ?x ?y ?x3 ?y3)))

; Who has control?
(<= (control ?lastPlayer)
    (true (lastToMove ?lastPlayer))
    captureAvailableForLastCapturingPiece)
(<= (control ?notLastPlayer)
    (true (lastToMove ?lastPlayer))
    (opponent ?lastPlayer ?notLastPlayer)
    (not captureAvailableForLastCapturingPiece))

; If we don't have control, just noop
(<= (legal ?player noop)
    (role ?player)
    (not (control ?player)))
; Otherwise, are we forced to make a capture with a particular piece?
(<= (legal ?player (capture ?x1 ?y1 ?x3 ?y3))
    (control ?player)
    (true (capturingPiece ?x1 ?y1))
    (legal2 ?player (capture ?x1 ?y1 ?x3 ?y3)))
; Otherwise, are we forced to make a capture?
(<= (legal ?player (capture ?x1 ?y1 ?x3 ?y3))
    (control ?player)
    (captureAvailable ?player)
    (not captureAvailableForLastCapturingPiece)
    (legal2 ?player (capture ?x1 ?y1 ?x3 ?y3)))
; Otherwise, we can do any of our moves (which should not be captures)
(<= (legal ?player (move ?x1 ?y1 ?x2 ?y2))
    (control ?player)
    (not (captureAvailable ?player))
    (legal2 ?player (move ?x1 ?y1 ?x2 ?y2)))

; Next state calculation
; Who gets the next turn?
(<= captureWasMade
    (does ?player (capture ?x1 ?y1 ?x3 ?y3)))
(<= kingingCaptureWasMade
    (does ?player (capture ?x1 ?y1 ?x3 1))
    (true (cell ?x1 ?y1 ?anyPlayer pawn)))
(<= kingingCaptureWasMade
    (does ?player (capture ?x1 ?y1 ?x3 8))
    (true (cell ?x1 ?y1 ?anyPlayer pawn)))

(<= (next (capturingPiece ?x3 ?y3))
    (does ?player (capture ?x1 ?y1 ?x3 ?y3))
    (not kingingCaptureWasMade))

(<= (next (lastToMove ?player))
    (does ?player (move ?x1 ?y1 ?x2 ?y2)))
(<= (next (lastToMove ?player))
    (does ?player (capture ?x1 ?y1 ?x2 ?y2)))

; Board state next turn
(<= (affected ?x1 ?y1)
    (does ?player (move ?x1 ?y1 ?x2 ?y2)))
(<= (affected ?x2 ?y2)
    (does ?player (move ?x1 ?y1 ?x2 ?y2)))
(<= (affected ?x1 ?y1)
    (does ?player (capture ?x1 ?y1 ?x3 ?y3)))
(<= (affected ?x2 ?y2)
    (does ?player (capture ?x1 ?y1 ?x3 ?y3))
    (threeInARow ?x1 ?y1 ?x2 ?y2 ?x3 ?y3))
(<= (affected ?x3 ?y3)
    (does ?player (capture ?x1 ?y1 ?x3 ?y3)))
; Unaffected pieces
(<= (next (cell ?x ?y ?player ?type))
    (true (cell ?x ?y ?player ?type))
    (not (affected ?x ?y)))
; Kinging moves and captures
(<= (next (cell ?x2 8 white king))
    (does white (move ?x1 ?y1 ?x2 8)))
(<= (next (cell ?x3 8 white king))
    (does white (capture ?x1 ?y1 ?x3 8)))
(<= (next (cell ?x2 1 black king))
    (does black (move ?x1 ?y1 ?x2 1)))
(<= (next (cell ?x3 1 black king))
    (does black (capture ?x1 ?y1 ?x3 1)))
; Other moves and captures
(<= (next (cell ?x2 ?y2 white ?type))
    (does white (move ?x1 ?y1 ?x2 ?y2))
    (true (cell ?x1 ?y1 white ?type))
    (distinct ?y2 8))
(<= (next (cell ?x3 ?y3 white ?type))
    (does white (capture ?x1 ?y1 ?x3 ?y3))
    (true (cell ?x1 ?y1 white ?type))
    (distinct ?y3 8))
(<= (next (cell ?x2 ?y2 black ?type))
    (does black (move ?x1 ?y1 ?x2 ?y2))
    (true (cell ?x1 ?y1 black ?type))
    (distinct ?y2 1))
(<= (next (cell ?x3 ?y3 black ?type))
    (does black (capture ?x1 ?y1 ?x3 ?y3))
    (true (cell ?x1 ?y1 black ?type))
    (distinct ?y3 1))

; Terminality and goal values
; If the player with control has no legal moves, they lose.
(<= (anyLegalMove ?player)
    (legal2 ?player ?move))
(<= (loser ?player)
    (control ?player)
    (not (anyLegalMove ?player)))
(<= terminal
    (loser ?player))
(<= (goal ?player 0)
    (loser ?player))
(<= (goal ?player 100)
    (loser ?opp)
    (opponent ?player ?opp))
    
    
; Step counter:
; Officially, we should wait 80 turns since the last time a pawn advanced or
; a capture was made. This could make games really long. Let's try 20 instead.
(init (step 0))
(<= shouldResetStepCounter
    (does ?player (move ?x1 ?y1 ?x2 ?y2))
    (true (cell ?x1 ?y1 ?player pawn)))
(<= shouldResetStepCounter
    (does ?player (capture ?x1 ?y1 ?x3 ?y3)))
(<= (next (step 0))
    shouldResetStepCounter)
(<= (next (step ?np1))
    (not shouldResetStepCounter)
    (true (step ?n))
    (succ ?n ?np1))
(<= terminal
    (true (step 20)))
(<= anyLoser
    (loser ?player))
(<= (goal ?player 50)
    (role ?player)
    (not anyLoser))

; BOARD TOPOLOGY
(nextFile a b)
(nextFile b c)
(nextFile c d)
(nextFile d e)
(nextFile e f)
(nextFile f g)
(nextFile g h)

(nextRank 1 2)
(nextRank 2 3)
(nextRank 3 4)
(nextRank 4 5)
(nextRank 5 6)
(nextRank 6 7)
(nextRank 7 8)

(<= (threeInARow ?x1 ?y1 ?x2 ?y2 ?x3 ?y3)
    (nextFile ?x1 ?x2)
    (nextFile ?x2 ?x3)
    (nextRank ?y1 ?y2)
    (nextRank ?y2 ?y3))
(<= (threeInARow ?x1 ?y1 ?x2 ?y2 ?x3 ?y3)
    (nextFile ?x3 ?x2)
    (nextFile ?x2 ?x1)
    (nextRank ?y1 ?y2)
    (nextRank ?y2 ?y3))
(<= (threeInARow ?x1 ?y1 ?x2 ?y2 ?x3 ?y3)
    (nextFile ?x1 ?x2)
    (nextFile ?x2 ?x3)
    (nextRank ?y3 ?y2)
    (nextRank ?y2 ?y1))
(<= (threeInARow ?x1 ?y1 ?x2 ?y2 ?x3 ?y3)
    (nextFile ?x3 ?x2)
    (nextFile ?x2 ?x1)
    (nextRank ?y3 ?y2)
    (nextRank ?y2 ?y1))

; BOARD COORDINATES

(file1 a)
(file2 b)
(file1 c)
(file2 d)
(file1 e)
(file2 f)
(file1 g)
(file2 h)
(<= (file ?x) (file1 ?x))
(<= (file ?x) (file2 ?x))
(rank1 1)
(rank2 2)
(rank1 3)
(rank2 4)
(rank1 5)
(rank2 6)
(rank1 7)
(rank2 8)
(<= (rank ?y) (rank1 ?y))
(<= (rank ?y) (rank2 ?y))

(<= (validSquare ?x ?y)
    (file1 ?x)
    (rank2 ?y))
(<= (validSquare ?x ?y)
    (file2 ?x)
    (rank1 ?y))

(succ 0 1)
(succ 1 2)
(succ 2 3)
(succ 3 4)
(succ 4 5)
(succ 5 6)
(succ 6 7)
(succ 7 8)
(succ 8 9)
(succ 9 10)
(succ 10 11)
(succ 11 12)
(succ 12 13)
(succ 13 14)
(succ 14 15)
(succ 15 16)
(succ 16 17)
(succ 17 18)
(succ 18 19)
(succ 19 20)

; Bases and inputs
(<= (base (lastToMove ?player))
    (role ?player))
(<= (base (cell ?x ?y ?player king))
    (role ?player)
    (validSquare ?x ?y))
(<= (base (cell ?x ?y ?player pawn))
    (role ?player)
    (validSquare ?x ?y))
(<= (base (capturingPiece ?x ?y))
    (validSquare ?x ?y))
(base (step 0))
(<= (base (step ?n))
    (succ ?m ?n))
(<= (input ?player noop)
    (role ?player))
(<= (input ?player (move ?x1 ?y1 ?x2 ?y2))
    (role ?player)
    (validSquare ?x1 ?y1)
    (or (nextFile ?x1 ?x2)
        (nextFile ?x2 ?x1))
    (or (nextRank ?y1 ?y2)
        (nextRank ?y2 ?y1)))
(<= (input ?player (capture ?x1 ?y1 ?x3 ?y3))
    (role ?player)
    (validSquare ?x1 ?y1)
    (threeInARow ?x1 ?y1 ?x2 ?y2 ?x3 ?y3))